"use strict";(self.webpackChunkistr_wiki_vuepress=self.webpackChunkistr_wiki_vuepress||[]).push([[660],{4989:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-d007164c",path:"/design-patterns/11%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.html",title:"单例模式（Singleton Design Pattern）",lang:"zh-CN",frontmatter:{title:"单例模式（Singleton Design Pattern）"},excerpt:"",headers:[{level:2,title:"为什么要使用单例",slug:"为什么要使用单例",children:[]},{level:2,title:"如何实现一个单例",slug:"如何实现一个单例",children:[{level:3,title:"饿汉式",slug:"饿汉式",children:[]},{level:3,title:"懒汉式(单重判断)",slug:"懒汉式-单重判断",children:[]},{level:3,title:"双重检测",slug:"双重检测",children:[]},{level:3,title:"静态内部类",slug:"静态内部类",children:[]},{level:3,title:"枚举（java）",slug:"枚举-java",children:[]},{level:3,title:"单例模式的复用",slug:"单例模式的复用",children:[]}]}],filePathRelative:"design-patterns/11单例模式.md",git:{updatedTime:1617093869e3,contributors:[{name:"刘玉路",email:"lyl07583@ly.com",commits:1}]}}},4800:(n,s,a)=>{a.r(s),a.d(s,{default:()=>i});var e=a(6252);const t=(0,e.uE)('<h2 id="为什么要使用单例" tabindex="-1"><a class="header-anchor" href="#为什么要使用单例" aria-hidden="true">#</a> 为什么要使用单例</h2><p>单例设计模式（Singleton Design Pattern）理解起来非常简单。一个类只允许创建一个对象（或者实例），那这个类就是一个单例类，这种设计模式就叫作单例设计模式，简称单例模式。</p><h2 id="如何实现一个单例" tabindex="-1"><a class="header-anchor" href="#如何实现一个单例" aria-hidden="true">#</a> 如何实现一个单例</h2><p>实现单例，需要满足以下条件</p><ul><li>构造函数需要是 private 访问权限的，这样才能避免外部通过 new 创建实例</li><li>考虑对象创建时的线程安全问题</li><li>考虑是否支持延迟加载</li><li>考虑 getInstance() 性能是否高（是否加锁）</li></ul><h3 id="饿汉式" tabindex="-1"><a class="header-anchor" href="#饿汉式" aria-hidden="true">#</a> 饿汉式</h3><p>在类加载的时候，instance 静态实例就已经创建并初始化，由于是运行时创建，所有是线程安全的。 缺点：不支持延迟加载，无论是否使用，在程序运行是都会初始化，占用资源。</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClientSingleton</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Client</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">ClientSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Client</span> <span class="token class-name">GetInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClientSingleton</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">static</span> final <span class="token class-name">Client</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token function">ClientSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">Client</span> <span class="token function">GetInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="懒汉式-单重判断" tabindex="-1"><a class="header-anchor" href="#懒汉式-单重判断" aria-hidden="true">#</a> 懒汉式(单重判断)</h3><p>懒汉式相对于饿汉式的优势是支持延迟加载。这种实现方式会导致频繁加锁、释放锁，以及并发度低等问题，频繁的调用会产生性能瓶颈。</p>',11),p=(0,e.Wm)("div",{class:"language-java ext-java line-numbers-mode"},[(0,e.Wm)("pre",{class:"language-java"},[(0,e.Wm)("code",null,[(0,e.Wm)("span",{class:"token keyword"},"public"),(0,e.Uk)(),(0,e.Wm)("span",{class:"token keyword"},"class"),(0,e.Uk)(),(0,e.Wm)("span",{class:"token class-name"},"ClientSingleton"),(0,e.Uk)(),(0,e.Wm)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e.Wm)("span",{class:"token keyword"},"private"),(0,e.Uk)(),(0,e.Wm)("span",{class:"token keyword"},"static"),(0,e.Uk)(),(0,e.Wm)("span",{class:"token class-name"},"Client"),(0,e.Uk)(" instance"),(0,e.Wm)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    "),(0,e.Wm)("span",{class:"token keyword"},"private"),(0,e.Uk)(),(0,e.Wm)("span",{class:"token class-name"},"ClientSingleton"),(0,e.Wm)("span",{class:"token punctuation"},"("),(0,e.Wm)("span",{class:"token punctuation"},")"),(0,e.Wm)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n\n    "),(0,e.Wm)("span",{class:"token keyword"},"public"),(0,e.Uk)(),(0,e.Wm)("span",{class:"token keyword"},"static"),(0,e.Uk)(),(0,e.Wm)("span",{class:"token class-name"},"Client"),(0,e.Uk)(),(0,e.Wm)("span",{class:"token class-name"},"GetInstance"),(0,e.Wm)("span",{class:"token punctuation"},"("),(0,e.Wm)("span",{class:"token punctuation"},")"),(0,e.Wm)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e.Wm)("span",{class:"token keyword"},"if"),(0,e.Wm)("span",{class:"token punctuation"},"("),(0,e.Uk)("instance "),(0,e.Wm)("span",{class:"token operator"},"=="),(0,e.Uk)(),(0,e.Wm)("span",{class:"token keyword"},"null"),(0,e.Wm)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e.Wm)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n            instance "),(0,e.Wm)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e.Wm)("span",{class:"token keyword"},"new"),(0,e.Uk)(),(0,e.Wm)("span",{class:"token class-name"},"Client"),(0,e.Wm)("span",{class:"token punctuation"},"("),(0,e.Wm)("span",{class:"token punctuation"},")"),(0,e.Wm)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n        "),(0,e.Wm)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n        "),(0,e.Wm)("span",{class:"token keyword"},"return"),(0,e.Uk)(" instance"),(0,e.Wm)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    "),(0,e.Wm)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n"),(0,e.Wm)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n")])]),(0,e.Wm)("div",{class:"line-numbers"},[(0,e.Wm)("span",{class:"line-number"},"1"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"2"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"3"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"4"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"5"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"6"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"7"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"8"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"9"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"10"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"11"),(0,e.Wm)("br")])],-1),c=(0,e.Wm)("div",{class:"language-csharp ext-cs line-numbers-mode"},[(0,e.Wm)("pre",{class:"language-csharp"},[(0,e.Wm)("code",null,[(0,e.Wm)("span",{class:"token doc-comment comment"},[(0,e.Uk)("/// "),(0,e.Wm)("span",{class:"token tag"},[(0,e.Wm)("span",{class:"token tag"},[(0,e.Wm)("span",{class:"token punctuation"},"<"),(0,e.Uk)("summary")]),(0,e.Wm)("span",{class:"token punctuation"},">")])]),(0,e.Uk)("\n"),(0,e.Wm)("span",{class:"token doc-comment comment"},"/// 单例模式的实现"),(0,e.Uk)("\n"),(0,e.Wm)("span",{class:"token doc-comment comment"},[(0,e.Uk)("/// "),(0,e.Wm)("span",{class:"token tag"},[(0,e.Wm)("span",{class:"token tag"},[(0,e.Wm)("span",{class:"token punctuation"},"</"),(0,e.Uk)("summary")]),(0,e.Wm)("span",{class:"token punctuation"},">")])]),(0,e.Uk)("\n"),(0,e.Wm)("span",{class:"token keyword"},"public"),(0,e.Uk)(),(0,e.Wm)("span",{class:"token keyword"},"class"),(0,e.Uk)(),(0,e.Wm)("span",{class:"token class-name"},"Singleton"),(0,e.Uk)("\n"),(0,e.Wm)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n\t"),(0,e.Wm)("span",{class:"token comment"},"// 定义一个静态变量来保存类的实例"),(0,e.Uk)("\n\t"),(0,e.Wm)("span",{class:"token keyword"},"private"),(0,e.Uk)(),(0,e.Wm)("span",{class:"token keyword"},"static"),(0,e.Uk)(),(0,e.Wm)("span",{class:"token class-name"},"Singleton"),(0,e.Uk)(" uniqueInstance"),(0,e.Wm)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n\n\t"),(0,e.Wm)("span",{class:"token comment"},"// 定义一个标识确保线程同步"),(0,e.Uk)("\n\t"),(0,e.Wm)("span",{class:"token keyword"},"private"),(0,e.Uk)(),(0,e.Wm)("span",{class:"token keyword"},"static"),(0,e.Uk)(),(0,e.Wm)("span",{class:"token keyword"},"readonly"),(0,e.Uk)(),(0,e.Wm)("span",{class:"token class-name"},[(0,e.Wm)("span",{class:"token keyword"},"object")]),(0,e.Uk)(" locker "),(0,e.Wm)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e.Wm)("span",{class:"token keyword"},"new"),(0,e.Uk)(),(0,e.Wm)("span",{class:"token constructor-invocation class-name"},[(0,e.Wm)("span",{class:"token keyword"},"object")]),(0,e.Wm)("span",{class:"token punctuation"},"("),(0,e.Wm)("span",{class:"token punctuation"},")"),(0,e.Wm)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n\n\t"),(0,e.Wm)("span",{class:"token comment"},"// 定义私有构造函数，使外界不能创建该类实例"),(0,e.Uk)("\n\t"),(0,e.Wm)("span",{class:"token keyword"},"private"),(0,e.Uk)(),(0,e.Wm)("span",{class:"token function"},"Singleton"),(0,e.Wm)("span",{class:"token punctuation"},"("),(0,e.Wm)("span",{class:"token punctuation"},")"),(0,e.Uk)("\t"),(0,e.Wm)("span",{class:"token punctuation"},"{"),(0,e.Wm)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n\n\t"),(0,e.Wm)("span",{class:"token doc-comment comment"},[(0,e.Uk)("/// "),(0,e.Wm)("span",{class:"token tag"},[(0,e.Wm)("span",{class:"token tag"},[(0,e.Wm)("span",{class:"token punctuation"},"<"),(0,e.Uk)("summary")]),(0,e.Wm)("span",{class:"token punctuation"},">")])]),(0,e.Uk)("\n\t"),(0,e.Wm)("span",{class:"token doc-comment comment"},"/// 定义公有方法提供一个全局访问点,同时你也可以定义公有属性来提供全局访问点"),(0,e.Uk)("\n\t"),(0,e.Wm)("span",{class:"token doc-comment comment"},[(0,e.Uk)("/// "),(0,e.Wm)("span",{class:"token tag"},[(0,e.Wm)("span",{class:"token tag"},[(0,e.Wm)("span",{class:"token punctuation"},"</"),(0,e.Uk)("summary")]),(0,e.Wm)("span",{class:"token punctuation"},">")])]),(0,e.Uk)("\n\t"),(0,e.Wm)("span",{class:"token keyword"},"public"),(0,e.Uk)(),(0,e.Wm)("span",{class:"token keyword"},"static"),(0,e.Uk)(),(0,e.Wm)("span",{class:"token return-type class-name"},"Singleton"),(0,e.Uk)(),(0,e.Wm)("span",{class:"token function"},"GetInstance"),(0,e.Wm)("span",{class:"token punctuation"},"("),(0,e.Wm)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n\t"),(0,e.Wm)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n\t\t"),(0,e.Wm)("span",{class:"token comment"},'// 当第一个线程运行到这里时，此时会对locker对象 "加锁"，'),(0,e.Uk)("\n\t\t"),(0,e.Wm)("span",{class:"token comment"},'// 当第二个线程运行该方法时，首先检测到locker对象为"加锁"状态，该线程就会挂起等待第一个线程解锁'),(0,e.Uk)("\n\t\t"),(0,e.Wm)("span",{class:"token comment"},'// lock语句运行完之后（即线程运行完之后）会对该对象"解锁"'),(0,e.Uk)("\n\t\t"),(0,e.Wm)("span",{class:"token keyword"},"lock"),(0,e.Uk)(),(0,e.Wm)("span",{class:"token punctuation"},"("),(0,e.Uk)("locker"),(0,e.Wm)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n\t\t"),(0,e.Wm)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n\t\t\t"),(0,e.Wm)("span",{class:"token comment"},"// 如果类的实例不存在则创建，否则直接返回"),(0,e.Uk)("\n\t\t\t"),(0,e.Wm)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e.Wm)("span",{class:"token punctuation"},"("),(0,e.Uk)("uniqueInstance "),(0,e.Wm)("span",{class:"token operator"},"=="),(0,e.Uk)(),(0,e.Wm)("span",{class:"token keyword"},"null"),(0,e.Wm)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n\t\t\t"),(0,e.Wm)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n\t\t\t\tuniqueInstance "),(0,e.Wm)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e.Wm)("span",{class:"token keyword"},"new"),(0,e.Uk)(),(0,e.Wm)("span",{class:"token constructor-invocation class-name"},"Singleton"),(0,e.Wm)("span",{class:"token punctuation"},"("),(0,e.Wm)("span",{class:"token punctuation"},")"),(0,e.Wm)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n\t\t\t"),(0,e.Wm)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n\t\t"),(0,e.Wm)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n\n\t\t"),(0,e.Wm)("span",{class:"token keyword"},"return"),(0,e.Uk)(" uniqueInstance"),(0,e.Wm)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n\t"),(0,e.Wm)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n"),(0,e.Wm)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n")])]),(0,e.Wm)("div",{class:"line-numbers"},[(0,e.Wm)("span",{class:"line-number"},"1"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"2"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"3"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"4"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"5"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"6"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"7"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"8"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"9"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"10"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"11"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"12"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"13"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"14"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"15"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"16"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"17"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"18"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"19"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"20"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"21"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"22"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"23"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"24"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"25"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"26"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"27"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"28"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"29"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"30"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"31"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"32"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"33"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"34"),(0,e.Wm)("br")])],-1),l=(0,e.Wm)("h3",{id:"双重检测",tabindex:"-1"},[(0,e.Wm)("a",{class:"header-anchor",href:"#双重检测","aria-hidden":"true"},"#"),(0,e.Uk)(" 双重检测")],-1),o=(0,e.Wm)("p",null,"双重检测实现方式既支持延迟加载、又支持高并发的单例实现方式。只要 instance 被创建之后，再调用 getInstance() 函数都不会进入到加锁逻辑中。所以，这种实现方式解决了懒汉式并发度低的问题。",-1),m=(0,e.Wm)("div",{class:"language-java ext-java line-numbers-mode"},[(0,e.Wm)("pre",{class:"language-java"},[(0,e.Wm)("code",null,[(0,e.Wm)("span",{class:"token keyword"},"public"),(0,e.Uk)(),(0,e.Wm)("span",{class:"token keyword"},"class"),(0,e.Uk)(),(0,e.Wm)("span",{class:"token class-name"},"ClientSingleton"),(0,e.Uk)(),(0,e.Wm)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e.Wm)("span",{class:"token keyword"},"private"),(0,e.Uk)(),(0,e.Wm)("span",{class:"token keyword"},"static"),(0,e.Uk)(),(0,e.Wm)("span",{class:"token class-name"},"Client"),(0,e.Uk)(" instance"),(0,e.Wm)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    "),(0,e.Wm)("span",{class:"token keyword"},"private"),(0,e.Uk)(),(0,e.Wm)("span",{class:"token class-name"},"ClientSingleton"),(0,e.Wm)("span",{class:"token punctuation"},"("),(0,e.Wm)("span",{class:"token punctuation"},")"),(0,e.Wm)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n\n    "),(0,e.Wm)("span",{class:"token keyword"},"public"),(0,e.Uk)(),(0,e.Wm)("span",{class:"token keyword"},"static"),(0,e.Uk)(),(0,e.Wm)("span",{class:"token class-name"},"Client"),(0,e.Uk)(),(0,e.Wm)("span",{class:"token class-name"},"GetInstance"),(0,e.Wm)("span",{class:"token punctuation"},"("),(0,e.Wm)("span",{class:"token punctuation"},")"),(0,e.Wm)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e.Wm)("span",{class:"token keyword"},"if"),(0,e.Wm)("span",{class:"token punctuation"},"("),(0,e.Uk)("instance "),(0,e.Wm)("span",{class:"token operator"},"=="),(0,e.Uk)(),(0,e.Wm)("span",{class:"token keyword"},"null"),(0,e.Wm)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e.Wm)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n            "),(0,e.Wm)("span",{class:"token keyword"},"synchronized"),(0,e.Wm)("span",{class:"token punctuation"},"("),(0,e.Wm)("span",{class:"token class-name"},"IdGenerator"),(0,e.Wm)("span",{class:"token punctuation"},"."),(0,e.Wm)("span",{class:"token keyword"},"class"),(0,e.Wm)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e.Wm)("span",{class:"token punctuation"},"{"),(0,e.Uk)(),(0,e.Wm)("span",{class:"token comment"},"// 此处为类级别的锁"),(0,e.Uk)("\n                "),(0,e.Wm)("span",{class:"token keyword"},"if"),(0,e.Wm)("span",{class:"token punctuation"},"("),(0,e.Uk)("instance "),(0,e.Wm)("span",{class:"token operator"},"=="),(0,e.Uk)(),(0,e.Wm)("span",{class:"token keyword"},"null"),(0,e.Wm)("span",{class:"token punctuation"},")"),(0,e.Uk)(),(0,e.Wm)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n                    instance "),(0,e.Wm)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e.Wm)("span",{class:"token keyword"},"new"),(0,e.Uk)(),(0,e.Wm)("span",{class:"token class-name"},"Client"),(0,e.Wm)("span",{class:"token punctuation"},"("),(0,e.Wm)("span",{class:"token punctuation"},")"),(0,e.Wm)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n                "),(0,e.Wm)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n            "),(0,e.Wm)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n        "),(0,e.Wm)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n        "),(0,e.Wm)("span",{class:"token keyword"},"return"),(0,e.Uk)(" instance"),(0,e.Wm)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    "),(0,e.Wm)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n"),(0,e.Wm)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n")])]),(0,e.Wm)("div",{class:"line-numbers"},[(0,e.Wm)("span",{class:"line-number"},"1"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"2"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"3"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"4"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"5"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"6"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"7"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"8"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"9"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"10"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"11"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"12"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"13"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"14"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"15"),(0,e.Wm)("br")])],-1),k=(0,e.Wm)("div",{class:"language-csharp ext-cs line-numbers-mode"},[(0,e.Wm)("pre",{class:"language-csharp"},[(0,e.Wm)("code",null,[(0,e.Wm)("span",{class:"token doc-comment comment"},[(0,e.Uk)("/// "),(0,e.Wm)("span",{class:"token tag"},[(0,e.Wm)("span",{class:"token tag"},[(0,e.Wm)("span",{class:"token punctuation"},"<"),(0,e.Uk)("summary")]),(0,e.Wm)("span",{class:"token punctuation"},">")])]),(0,e.Uk)("\n"),(0,e.Wm)("span",{class:"token doc-comment comment"},"/// 单例模式的实现"),(0,e.Uk)("\n"),(0,e.Wm)("span",{class:"token doc-comment comment"},[(0,e.Uk)("/// "),(0,e.Wm)("span",{class:"token tag"},[(0,e.Wm)("span",{class:"token tag"},[(0,e.Wm)("span",{class:"token punctuation"},"</"),(0,e.Uk)("summary")]),(0,e.Wm)("span",{class:"token punctuation"},">")])]),(0,e.Uk)("\n"),(0,e.Wm)("span",{class:"token keyword"},"public"),(0,e.Uk)(),(0,e.Wm)("span",{class:"token keyword"},"class"),(0,e.Uk)(),(0,e.Wm)("span",{class:"token class-name"},"Singleton"),(0,e.Uk)("\n"),(0,e.Wm)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n    "),(0,e.Wm)("span",{class:"token comment"},"// 定义一个静态变量来保存类的实例"),(0,e.Uk)("\n    "),(0,e.Wm)("span",{class:"token keyword"},"private"),(0,e.Uk)(),(0,e.Wm)("span",{class:"token keyword"},"static"),(0,e.Uk)(),(0,e.Wm)("span",{class:"token class-name"},"Singleton"),(0,e.Uk)(" uniqueInstance"),(0,e.Wm)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n\n    "),(0,e.Wm)("span",{class:"token comment"},"// 定义一个标识确保线程同步"),(0,e.Uk)("\n    "),(0,e.Wm)("span",{class:"token keyword"},"private"),(0,e.Uk)(),(0,e.Wm)("span",{class:"token keyword"},"static"),(0,e.Uk)(),(0,e.Wm)("span",{class:"token keyword"},"readonly"),(0,e.Uk)(),(0,e.Wm)("span",{class:"token class-name"},[(0,e.Wm)("span",{class:"token keyword"},"object")]),(0,e.Uk)(" locker "),(0,e.Wm)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e.Wm)("span",{class:"token keyword"},"new"),(0,e.Uk)(),(0,e.Wm)("span",{class:"token constructor-invocation class-name"},[(0,e.Wm)("span",{class:"token keyword"},"object")]),(0,e.Wm)("span",{class:"token punctuation"},"("),(0,e.Wm)("span",{class:"token punctuation"},")"),(0,e.Wm)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n\n    "),(0,e.Wm)("span",{class:"token comment"},"// 定义私有构造函数，使外界不能创建该类实例"),(0,e.Uk)("\n    "),(0,e.Wm)("span",{class:"token keyword"},"private"),(0,e.Uk)(),(0,e.Wm)("span",{class:"token function"},"Singleton"),(0,e.Wm)("span",{class:"token punctuation"},"("),(0,e.Wm)("span",{class:"token punctuation"},")"),(0,e.Uk)("\t"),(0,e.Wm)("span",{class:"token punctuation"},"{"),(0,e.Wm)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n\n    "),(0,e.Wm)("span",{class:"token doc-comment comment"},[(0,e.Uk)("/// "),(0,e.Wm)("span",{class:"token tag"},[(0,e.Wm)("span",{class:"token tag"},[(0,e.Wm)("span",{class:"token punctuation"},"<"),(0,e.Uk)("summary")]),(0,e.Wm)("span",{class:"token punctuation"},">")])]),(0,e.Uk)("\n    "),(0,e.Wm)("span",{class:"token doc-comment comment"},"/// 定义公有方法提供一个全局访问点,同时你也可以定义公有属性来提供全局访问点"),(0,e.Uk)("\n    "),(0,e.Wm)("span",{class:"token doc-comment comment"},[(0,e.Uk)("/// "),(0,e.Wm)("span",{class:"token tag"},[(0,e.Wm)("span",{class:"token tag"},[(0,e.Wm)("span",{class:"token punctuation"},"</"),(0,e.Uk)("summary")]),(0,e.Wm)("span",{class:"token punctuation"},">")])]),(0,e.Uk)("\n    "),(0,e.Wm)("span",{class:"token keyword"},"public"),(0,e.Uk)(),(0,e.Wm)("span",{class:"token keyword"},"static"),(0,e.Uk)(),(0,e.Wm)("span",{class:"token return-type class-name"},"Singleton"),(0,e.Uk)(),(0,e.Wm)("span",{class:"token function"},"GetInstance"),(0,e.Wm)("span",{class:"token punctuation"},"("),(0,e.Wm)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n    "),(0,e.Wm)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n        "),(0,e.Wm)("span",{class:"token comment"},'// 当第一个线程运行到这里时，此时会对locker对象 "加锁"，'),(0,e.Uk)("\n        "),(0,e.Wm)("span",{class:"token comment"},'// 当第二个线程运行该方法时，首先检测到locker对象为"加锁"状态，该线程就会挂起等待第一个线程解锁'),(0,e.Uk)("\n        "),(0,e.Wm)("span",{class:"token comment"},'// lock语句运行完之后（即线程运行完之后）会对该对象"解锁"'),(0,e.Uk)("\n        "),(0,e.Wm)("span",{class:"token comment"},"// 双重锁定只需要一句判断就可以了"),(0,e.Uk)("\n        "),(0,e.Wm)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e.Wm)("span",{class:"token punctuation"},"("),(0,e.Uk)("uniqueInstance "),(0,e.Wm)("span",{class:"token operator"},"=="),(0,e.Uk)(),(0,e.Wm)("span",{class:"token keyword"},"null"),(0,e.Wm)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n        "),(0,e.Wm)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n            "),(0,e.Wm)("span",{class:"token keyword"},"lock"),(0,e.Uk)(),(0,e.Wm)("span",{class:"token punctuation"},"("),(0,e.Uk)("locker"),(0,e.Wm)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n            "),(0,e.Wm)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n                "),(0,e.Wm)("span",{class:"token comment"},"// 如果类的实例不存在则创建，否则直接返回"),(0,e.Uk)("\n                "),(0,e.Wm)("span",{class:"token keyword"},"if"),(0,e.Uk)(),(0,e.Wm)("span",{class:"token punctuation"},"("),(0,e.Uk)("uniqueInstance "),(0,e.Wm)("span",{class:"token operator"},"=="),(0,e.Uk)(),(0,e.Wm)("span",{class:"token keyword"},"null"),(0,e.Wm)("span",{class:"token punctuation"},")"),(0,e.Uk)("\n                "),(0,e.Wm)("span",{class:"token punctuation"},"{"),(0,e.Uk)("\n                    uniqueInstance "),(0,e.Wm)("span",{class:"token operator"},"="),(0,e.Uk)(),(0,e.Wm)("span",{class:"token keyword"},"new"),(0,e.Uk)(),(0,e.Wm)("span",{class:"token constructor-invocation class-name"},"Singleton"),(0,e.Wm)("span",{class:"token punctuation"},"("),(0,e.Wm)("span",{class:"token punctuation"},")"),(0,e.Wm)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n                "),(0,e.Wm)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n            "),(0,e.Wm)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n        "),(0,e.Wm)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n        "),(0,e.Wm)("span",{class:"token keyword"},"return"),(0,e.Uk)(" uniqueInstance"),(0,e.Wm)("span",{class:"token punctuation"},";"),(0,e.Uk)("\n    "),(0,e.Wm)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n"),(0,e.Wm)("span",{class:"token punctuation"},"}"),(0,e.Uk)("\n")])]),(0,e.Wm)("div",{class:"line-numbers"},[(0,e.Wm)("span",{class:"line-number"},"1"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"2"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"3"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"4"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"5"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"6"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"7"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"8"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"9"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"10"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"11"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"12"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"13"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"14"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"15"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"16"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"17"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"18"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"19"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"20"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"21"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"22"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"23"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"24"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"25"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"26"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"27"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"28"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"29"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"30"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"31"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"32"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"33"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"34"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"35"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"36"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"37"),(0,e.Wm)("br")])],-1),u=(0,e.uE)('<h3 id="静态内部类" tabindex="-1"><a class="header-anchor" href="#静态内部类" aria-hidden="true">#</a> 静态内部类</h3><p>利用 Java 的静态内部类来实现单例。这种实现方式，既支持延迟加载，也支持高并发，实现起来也比双重检测简单</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClientSingleton</span> <span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">ClientSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SingletonHolder</span><span class="token punctuation">{</span>\n        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Client</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Client</span> <span class="token class-name">GetInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token class-name">SingletonHolder</span><span class="token punctuation">.</span>instance<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="枚举-java" tabindex="-1"><a class="header-anchor" href="#枚举-java" aria-hidden="true">#</a> 枚举（java）</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">ClientSingleton</span> <span class="token punctuation">{</span>\n    INSTANCE<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="单例模式的复用" tabindex="-1"><a class="header-anchor" href="#单例模式的复用" aria-hidden="true">#</a> 单例模式的复用</h3><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>\n<span class="token doc-comment comment">/// 使用泛型来完成单例模式的重用</span>\n<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>\n<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeparam</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>T<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeparam</span><span class="token punctuation">&gt;</span></span></span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonProvider<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n\t<span class="token function">SingletonProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>\n\n\t<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">T</span> Instance\n\t<span class="token punctuation">{</span>\n\t\t<span class="token keyword">get</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> SingletonCreator<span class="token punctuation">.</span>instance<span class="token punctuation">;</span> <span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n\n\t<span class="token keyword">class</span> <span class="token class-name">SingletonCreator</span>\n\t<span class="token punctuation">{</span>\n\t\t<span class="token keyword">static</span> <span class="token function">SingletonCreator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>\n\t\t<span class="token keyword">internal</span> <span class="token keyword">static</span> <span class="token keyword">readonly</span> <span class="token class-name">T</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">T</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>summary</span><span class="token punctuation">&gt;</span></span></span>\n<span class="token doc-comment comment">/// 范型单例示例</span>\n<span class="token doc-comment comment">/// <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>summary</span><span class="token punctuation">&gt;</span></span></span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">demo</span>\n<span class="token punctuation">{</span>\n\t<span class="token keyword">private</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">dosomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t<span class="token punctuation">{</span>\n\t\tSingletonProvider<span class="token operator">&lt;</span>TestClass<span class="token operator">&gt;</span><span class="token punctuation">.</span>Instance<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div>',7),i={render:function(n,s){const a=(0,e.up)("CodeGroupItem"),i=(0,e.up)("CodeGroup");return(0,e.wg)(),(0,e.j4)(e.HY,null,[t,(0,e.Wm)(i,null,{default:(0,e.w5)((()=>[(0,e.Wm)(a,{title:"Java示例",active:""},{default:(0,e.w5)((()=>[p])),_:1}),(0,e.Wm)(a,{title:"C#示例"},{default:(0,e.w5)((()=>[c])),_:1})])),_:1}),l,o,(0,e.Wm)(i,null,{default:(0,e.w5)((()=>[(0,e.Wm)(a,{title:"Java示例",active:""},{default:(0,e.w5)((()=>[m])),_:1}),(0,e.Wm)(a,{title:"C#示例"},{default:(0,e.w5)((()=>[k])),_:1})])),_:1}),u],64)}}}}]);