"use strict";(self.webpackChunkistr_wiki_vuepress=self.webpackChunkistr_wiki_vuepress||[]).push([[746],{2804:(n,s,e)=>{e.r(s),e.d(s,{data:()=>a});const a={key:"v-37696a6b",path:"/python/01module-loggin.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"logging模块简介",slug:"logging模块简介",children:[{level:3,title:"2.1 基本使用",slug:"_2-1-基本使用",children:[]}]}],filePathRelative:"python/01module-loggin.md",git:{updatedTime:1625572353e3,contributors:[{name:"刘玉路",email:"lyl07583@ly.com",commits:2}]}}},9497:(n,s,e)=>{e.r(s),e.d(s,{default:()=>l});const a=(0,e(6252).uE)('<h2 id="logging模块简介" tabindex="-1"><a class="header-anchor" href="#logging模块简介" aria-hidden="true">#</a> logging模块简介</h2><p>logging模块是Python内置的标准模块，主要用于输出运行日志，可以设置输出日志的等级、日志保存路径、日志文件回滚等；相比print，具备如下优点：</p><p>可以通过设置不同的日志等级，在release版本中只输出重要信息，而不必显示大量的调试信息； print将所有信息都输出到标准输出中，严重影响开发者从标准输出中查看其它数据；logging则可以由开发者决定将信息输出到什么地方，以及怎么输出；</p><p>logging模块使用</p><h3 id="_2-1-基本使用" tabindex="-1"><a class="header-anchor" href="#_2-1-基本使用" aria-hidden="true">#</a> 2.1 基本使用</h3><p>配置logging基本的设置，然后在控制台输出日志，</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>import logging\nlogging.basicConfig(level = logging.INFO,format = &#39;%(asctime)s - %(name)s - %(levelname)s - %(message)s&#39;)\nlogger = logging.getLogger(__name__)\n\nlogger.info(&quot;Start print log&quot;)\nlogger.debug(&quot;Do something&quot;)\nlogger.warning(&quot;Something maybe fail.&quot;)\nlogger.info(&quot;Finish&quot;)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>运行时，控制台输出，</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>2016-10-09 19:11:19,434 - __main__ - INFO - Start print log\n2016-10-09 19:11:19,434 - __main__ - WARNING - Something maybe fail.\n2016-10-09 19:11:19,434 - __main__ - INFO - Finish\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>logging中可以选择很多消息级别，如debug、info、warning、error以及critical。通过赋予logger或者handler不同的级别，开发者就可以只输出错误信息到特定的记录文件，或者在调试时只记录调试信息。</p><p>例如，我们将logger的级别改为DEBUG，再观察一下输出结果，</p><p>logging.basicConfig(level = logging.DEBUG,format = &#39;%(asctime)s - %(name)s - %(levelname)s - %(message)s&#39;) 控制台输出，可以发现，输出了debug的信息。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>2016-10-09 19:12:08,289 - __main__ - INFO - Start print log\n2016-10-09 19:12:08,289 - __main__ - DEBUG - Do something\n2016-10-09 19:12:08,289 - __main__ - WARNING - Something maybe fail.\n2016-10-09 19:12:08,289 - __main__ - INFO - Finish\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>logging.basicConfig函数各参数：</p><ul><li>filename：指定日志文件名；</li><li>filemode：和file函数意义相同，指定日志文件的打开模式，&#39;w&#39;或者&#39;a&#39;；</li><li>format：指定输出的格式和内容，format可以输出很多有用的信息，</li></ul><p>参数：作用</p><ul><li>%(levelno)s：打印日志级别的数值</li><li>%(levelname)s：打印日志级别的名称 %(pathname)s：打印当前执行程序的路径，其实就是sys.argv[0] %(filename)s：打印当前执行程序名 %(funcName)s：打印日志的当前函数 %(lineno)d：打印日志的当前行号 %(asctime)s：打印日志的时间 %(thread)d：打印线程ID %(threadName)s：打印线程名称 %(process)d：打印进程ID %(message)s：打印日志信息 datefmt：指定时间格式，同time.strftime()；</li></ul><p>level：设置日志级别，默认为logging.WARNNING；</p><p>stream：指定将日志的输出流，可以指定输出到sys.stderr，sys.stdout或者文件，默认输出到sys.stderr，当stream和filename同时指定时，stream被忽略；</p><p>2.2 将日志写入到文件 2.2.1 将日志写入到文件</p><p>设置logging，创建一个FileHandler，并对输出消息的格式进行设置，将其添加到logger，然后将日志写入到指定的文件中，</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>import logging\nlogger = logging.getLogger(__name__)\nlogger.setLevel(level = logging.INFO)\nhandler = logging.FileHandler(&quot;log.txt&quot;)\nhandler.setLevel(logging.INFO)\nformatter = logging.Formatter(&#39;%(asctime)s - %(name)s - %(levelname)s - %(message)s&#39;)\nhandler.setFormatter(formatter)\nlogger.addHandler(handler)\n\nlogger.info(&quot;Start print log&quot;)\nlogger.debug(&quot;Do something&quot;)\nlogger.warning(&quot;Something maybe fail.&quot;)\nlogger.info(&quot;Finish&quot;)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>log.txt中日志数据为，</p><p>2016-10-09 19:01:13,263 - <strong>main</strong> - INFO - Start print log 2016-10-09 19:01:13,263 - <strong>main</strong> - WARNING - Something maybe fail. 2016-10-09 19:01:13,263 - <strong>main</strong> - INFO - Finish 2.2.2 将日志同时输出到屏幕和日志文件</p><p>logger中添加StreamHandler，可以将日志输出到屏幕上，</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>import logging\nlogger = logging.getLogger(__name__)\nlogger.setLevel(level = logging.INFO)\nhandler = logging.FileHandler(&quot;log.txt&quot;)\nhandler.setLevel(logging.INFO)\nformatter = logging.Formatter(&#39;%(asctime)s - %(name)s - %(levelname)s - %(message)s&#39;)\nhandler.setFormatter(formatter)\n\nconsole = logging.StreamHandler()\nconsole.setLevel(logging.INFO)\n\nlogger.addHandler(handler)\nlogger.addHandler(console)\n\nlogger.info(&quot;Start print log&quot;)\nlogger.debug(&quot;Do something&quot;)\nlogger.warning(&quot;Something maybe fail.&quot;)\nlogger.info(&quot;Finish&quot;)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>可以在log.txt文件和控制台中看到，</p><p>2016-10-09 19:20:46,553 - <strong>main</strong> - INFO - Start print log 2016-10-09 19:20:46,553 - <strong>main</strong> - WARNING - Something maybe fail. 2016-10-09 19:20:46,553 - <strong>main</strong> - INFO - Finish 可以发现，logging有一个日志处理的主对象，其他处理方式都是通过addHandler添加进去，logging中包含的handler主要有如下几种，</p><p>handler名称：位置；作用</p><p>StreamHandler：logging.StreamHandler；日志输出到流，可以是sys.stderr，sys.stdout或者文件 FileHandler：logging.FileHandler；日志输出到文件 BaseRotatingHandler：logging.handlers.BaseRotatingHandler；基本的日志回滚方式 RotatingHandler：logging.handlers.RotatingHandler；日志回滚方式，支持日志文件最大数量和日志文件回滚 TimeRotatingHandler：logging.handlers.TimeRotatingHandler；日志回滚方式，在一定时间区域内回滚日志文件 SocketHandler：logging.handlers.SocketHandler；远程输出日志到TCP/IP sockets DatagramHandler：logging.handlers.DatagramHandler；远程输出日志到UDP sockets SMTPHandler：logging.handlers.SMTPHandler；远程输出日志到邮件地址 SysLogHandler：logging.handlers.SysLogHandler；日志输出到syslog NTEventLogHandler：logging.handlers.NTEventLogHandler；远程输出日志到Windows NT/2000/XP的事件日志 MemoryHandler：logging.handlers.MemoryHandler；日志输出到内存中的指定buffer HTTPHandler：logging.handlers.HTTPHandler；通过&quot;GET&quot;或者&quot;POST&quot;远程输出到HTTP服务器 2.2.3 日志回滚</p><p>使用RotatingFileHandler，可以实现日志回滚，</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>import logging\nfrom logging.handlers import RotatingFileHandler\nlogger = logging.getLogger(__name__)\nlogger.setLevel(level = logging.INFO)\n#定义一个RotatingFileHandler，最多备份3个日志文件，每个日志文件最大1K\nrHandler = RotatingFileHandler(&quot;log.txt&quot;,maxBytes = 1*1024,backupCount = 3)\nrHandler.setLevel(logging.INFO)\nformatter = logging.Formatter(&#39;%(asctime)s - %(name)s - %(levelname)s - %(message)s&#39;)\nrHandler.setFormatter(formatter)\n\nconsole = logging.StreamHandler()\nconsole.setLevel(logging.INFO)\nconsole.setFormatter(formatter)\n\nlogger.addHandler(rHandler)\nlogger.addHandler(console)\n\nlogger.info(&quot;Start print log&quot;)\nlogger.debug(&quot;Do something&quot;)\nlogger.warning(&quot;Something maybe fail.&quot;)\nlogger.info(&quot;Finish&quot;)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>可以在工程目录中看到，备份的日志文件，</p><p>2016/10/09 19:36 732 log.txt 2016/10/09 19:36 967 log.txt.1 2016/10/09 19:36 985 log.txt.2 2016/10/09 19:36 976 log.txt.3 2.3 设置消息的等级 可以设置不同的日志等级，用于控制日志的输出，</p><p>日志等级：使用范围</p><p>FATAL：致命错误 CRITICAL：特别糟糕的事情，如内存耗尽、磁盘空间为空，一般很少使用 ERROR：发生错误时，如IO操作失败或者连接问题 WARNING：发生很重要的事件，但是并不是错误时，如用户登录密码错误 INFO：处理请求或者状态变化等日常事务 DEBUG：调试过程中使用DEBUG等级，如算法中每个循环的中间状态 2.4 捕获traceback Python中的traceback模块被用于跟踪异常返回信息，可以在logging中记录下traceback，</p><p>代码，</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>import logging\nlogger = logging.getLogger(__name__)\nlogger.setLevel(level = logging.INFO)\nhandler = logging.FileHandler(&quot;log.txt&quot;)\nhandler.setLevel(logging.INFO)\nformatter = logging.Formatter(&#39;%(asctime)s - %(name)s - %(levelname)s - %(message)s&#39;)\nhandler.setFormatter(formatter)\n\nconsole = logging.StreamHandler()\nconsole.setLevel(logging.INFO)\n\nlogger.addHandler(handler)\nlogger.addHandler(console)\n\nlogger.info(&quot;Start print log&quot;)\nlogger.debug(&quot;Do something&quot;)\nlogger.warning(&quot;Something maybe fail.&quot;)\ntry:\n    open(&quot;sklearn.txt&quot;,&quot;rb&quot;)\nexcept (SystemExit,KeyboardInterrupt):\n    raise\nexcept Exception:\n    logger.error(&quot;Faild to open sklearn.txt from logger.error&quot;,exc_info = True)\n\nlogger.info(&quot;Finish&quot;)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>控制台和日志文件log.txt中输出，</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Start print log\nSomething maybe fail.\nFaild to open sklearn.txt from logger.error\nTraceback (most recent call last):\n  File &quot;G:\\zhb7627\\Code\\Eclipse WorkSpace\\PythonTest\\test.py&quot;, line 23, in &lt;module&gt;\n    open(&quot;sklearn.txt&quot;,&quot;rb&quot;)\nIOError: [Errno 2] No such file or directory: &#39;sklearn.txt&#39;\nFinish\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>也可以使用logger.exception(msg,_args)，它等价于logger.error(msg,exc_info = True,_args)，</p><p>将</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>logger.error(&quot;Faild to open sklearn.txt from logger.error&quot;,exc_info = True)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>替换为，</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>logger.exception(&quot;Failed to open sklearn.txt from logger.exception&quot;)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>控制台和日志文件log.txt中输出，</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Start print log\nSomething maybe fail.\nFailed to open sklearn.txt from logger.exception\nTraceback (most recent call last):\n  File &quot;G:\\zhb7627\\Code\\Eclipse WorkSpace\\PythonTest\\test.py&quot;, line 23, in &lt;module&gt;\n    open(&quot;sklearn.txt&quot;,&quot;rb&quot;)\nIOError: [Errno 2] No such file or directory: &#39;sklearn.txt&#39;\nFinish\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>2.5 多模块使用logging 主模块mainModule.py，</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>import logging\nimport subModule\nlogger = logging.getLogger(&quot;mainModule&quot;)\nlogger.setLevel(level = logging.INFO)\nhandler = logging.FileHandler(&quot;log.txt&quot;)\nhandler.setLevel(logging.INFO)\nformatter = logging.Formatter(&#39;%(asctime)s - %(name)s - %(levelname)s - %(message)s&#39;)\nhandler.setFormatter(formatter)\n\nconsole = logging.StreamHandler()\nconsole.setLevel(logging.INFO)\nconsole.setFormatter(formatter)\n\nlogger.addHandler(handler)\nlogger.addHandler(console)\n\n\nlogger.info(&quot;creating an instance of subModule.subModuleClass&quot;)\na = subModule.SubModuleClass()\nlogger.info(&quot;calling subModule.subModuleClass.doSomething&quot;)\na.doSomething()\nlogger.info(&quot;done with  subModule.subModuleClass.doSomething&quot;)\nlogger.info(&quot;calling subModule.some_function&quot;)\nsubModule.som_function()\nlogger.info(&quot;done with subModule.some_function&quot;)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>子模块subModule.py，</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>import logging\n\nmodule_logger = logging.getLogger(&quot;mainModule.sub&quot;)\nclass SubModuleClass(object):\n    def __init__(self):\n        self.logger = logging.getLogger(&quot;mainModule.sub.module&quot;)\n        self.logger.info(&quot;creating an instance in SubModuleClass&quot;)\n    def doSomething(self):\n        self.logger.info(&quot;do something in SubModule&quot;)\n        a = []\n        a.append(1)\n        self.logger.debug(&quot;list a = &quot; + str(a))\n        self.logger.info(&quot;finish something in SubModuleClass&quot;)\n\ndef som_function():\n    module_logger.info(&quot;call function some_function&quot;)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>执行之后，在控制和日志文件log.txt中输出，</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>2016-10-09 20:25:42,276 - mainModule - INFO - creating an instance of subModule.subModuleClass\n2016-10-09 20:25:42,279 - mainModule.sub.module - INFO - creating an instance in SubModuleClass\n2016-10-09 20:25:42,279 - mainModule - INFO - calling subModule.subModuleClass.doSomething\n2016-10-09 20:25:42,279 - mainModule.sub.module - INFO - do something in SubModule\n2016-10-09 20:25:42,279 - mainModule.sub.module - INFO - finish something in SubModuleClass\n2016-10-09 20:25:42,279 - mainModule - INFO - done with  subModule.subModuleClass.doSomething\n2016-10-09 20:25:42,279 - mainModule - INFO - calling subModule.some_function\n2016-10-09 20:25:42,279 - mainModule.sub - INFO - call function some_function\n2016-10-09 20:25:42,279 - mainModule - INFO - done with subModule.some_function\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>首先在主模块定义了logger&#39;mainModule&#39;，并对它进行了配置，就可以在解释器进程里面的其他地方通过getLogger(&#39;mainModule&#39;)得到的对象都是一样的，不需要重新配置，可以直接使用。定义的该logger的子logger，都可以共享父logger的定义和配置，所谓的父子logger是通过命名来识别，任意以&#39;mainModule&#39;开头的logger都是它的子logger，例如&#39;mainModule.sub&#39;。</p><p>实际开发一个application，首先可以通过logging配置文件编写好这个application所对应的配置，可以生成一个根logger，如&#39;PythonAPP&#39;，然后在主函数中通过fileConfig加载logging配置，接着在application的其他地方、不同的模块中，可以使用根logger的子logger，如&#39;PythonAPP.Core&#39;，&#39;PythonAPP.Web&#39;来进行log，而不需要反复的定义和配置各个模块的logger。</p><p>3 通过JSON或者YAML文件配置logging模块 尽管可以在Python代码中配置logging，但是这样并不够灵活，最好的方法是使用一个配置文件来配置。在Python 2.7及以后的版本中，可以从字典中加载logging配置，也就意味着可以通过JSON或者YAML文件加载日志的配置。</p><p>3.1 通过JSON文件配置 JSON配置文件，</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>{\n    &quot;version&quot;:1,\n    &quot;disable_existing_loggers&quot;:false,\n    &quot;formatters&quot;:{\n        &quot;simple&quot;:{\n            &quot;format&quot;:&quot;%(asctime)s - %(name)s - %(levelname)s - %(message)s&quot;\n        }\n    },\n    &quot;handlers&quot;:{\n        &quot;console&quot;:{\n            &quot;class&quot;:&quot;logging.StreamHandler&quot;,\n            &quot;level&quot;:&quot;DEBUG&quot;,\n            &quot;formatter&quot;:&quot;simple&quot;,\n            &quot;stream&quot;:&quot;ext://sys.stdout&quot;\n        },\n        &quot;info_file_handler&quot;:{\n            &quot;class&quot;:&quot;logging.handlers.RotatingFileHandler&quot;,\n            &quot;level&quot;:&quot;INFO&quot;,\n            &quot;formatter&quot;:&quot;simple&quot;,\n            &quot;filename&quot;:&quot;info.log&quot;,\n            &quot;maxBytes&quot;:&quot;10485760&quot;,\n            &quot;backupCount&quot;:20,\n            &quot;encoding&quot;:&quot;utf8&quot;\n        },\n        &quot;error_file_handler&quot;:{\n            &quot;class&quot;:&quot;logging.handlers.RotatingFileHandler&quot;,\n            &quot;level&quot;:&quot;ERROR&quot;,\n            &quot;formatter&quot;:&quot;simple&quot;,\n            &quot;filename&quot;:&quot;errors.log&quot;,\n            &quot;maxBytes&quot;:10485760,\n            &quot;backupCount&quot;:20,\n            &quot;encoding&quot;:&quot;utf8&quot;\n        }\n    },\n    &quot;loggers&quot;:{\n        &quot;my_module&quot;:{\n            &quot;level&quot;:&quot;ERROR&quot;,\n            &quot;handlers&quot;:[&quot;info_file_handler&quot;],\n            &quot;propagate&quot;:&quot;no&quot;\n        }\n    },\n    &quot;root&quot;:{\n        &quot;level&quot;:&quot;INFO&quot;,\n        &quot;handlers&quot;:[&quot;console&quot;,&quot;info_file_handler&quot;,&quot;error_file_handler&quot;]\n    }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br></div></div><p>通过JSON加载配置文件，然后通过logging.dictConfig配置logging，</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>import json\nimport logging.config\nimport os\n\ndef setup_logging(default_path = &quot;logging.json&quot;,default_level = logging.INFO,env_key = &quot;LOG_CFG&quot;):\n    path = default_path\n    value = os.getenv(env_key,None)\n    if value:\n        path = value\n    if os.path.exists(path):\n        with open(path,&quot;r&quot;) as f:\n            config = json.load(f)\n            logging.config.dictConfig(config)\n    else:\n        logging.basicConfig(level = default_level)\n\ndef func():\n    logging.info(&quot;start func&quot;)\n\n    logging.info(&quot;exec func&quot;)\n\n    logging.info(&quot;end func&quot;)\n\nif __name__ == &quot;__main__&quot;:\n    setup_logging(default_path = &quot;logging.json&quot;)\n    func()\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>3.2 通过YAML文件配置 通过YAML文件进行配置，比JSON看起来更加简介明了，</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>version: 1\ndisable_existing_loggers: False\nformatters:\n        simple:\n            format: &quot;%(asctime)s - %(name)s - %(levelname)s - %(message)s&quot;\nhandlers:\n    console:\n            class: logging.StreamHandler\n            level: DEBUG\n            formatter: simple\n            stream: ext://sys.stdout\n    info_file_handler:\n            class: logging.handlers.RotatingFileHandler\n            level: INFO\n            formatter: simple\n            filename: info.log\n            maxBytes: 10485760\n            backupCount: 20\n            encoding: utf8\n    error_file_handler:\n            class: logging.handlers.RotatingFileHandler\n            level: ERROR\n            formatter: simple\n            filename: errors.log\n            maxBytes: 10485760\n            backupCount: 20\n            encoding: utf8\nloggers:\n    my_module:\n            level: ERROR\n            handlers: [info_file_handler]\n            propagate: no\nroot:\n    level: INFO\n    handlers: [console,info_file_handler,error_file_handler]\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><p>通过YAML加载配置文件，然后通过logging.dictConfig配置logging，</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>import yaml\nimport logging.config\nimport os\n\ndef setup_logging(default_path = &quot;logging.yaml&quot;,default_level = logging.INFO,env_key = &quot;LOG_CFG&quot;):\n    path = default_path\n    value = os.getenv(env_key,None)\n    if value:\n        path = value\n    if os.path.exists(path):\n        with open(path,&quot;r&quot;) as f:\n            config = yaml.load(f)\n            logging.config.dictConfig(config)\n    else:\n        logging.basicConfig(level = default_level)\n\ndef func():\n    logging.info(&quot;start func&quot;)\n\n    logging.info(&quot;exec func&quot;)\n\n    logging.info(&quot;end func&quot;)\n\nif __name__ == &quot;__main__&quot;:\n    setup_logging(default_path = &quot;logging.yaml&quot;)\n    func()\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div>',64),l={render:function(n,s){return a}}}}]);