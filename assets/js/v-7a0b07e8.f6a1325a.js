"use strict";(self.webpackChunkistr_wiki_vuepress=self.webpackChunkistr_wiki_vuepress||[]).push([[510],{5099:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-7a0b07e8",path:"/python/02module-json.html",title:"",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[],filePathRelative:"python/02module-json.md",git:{updatedTime:1625572353e3,contributors:[{name:"刘玉路",email:"lyl07583@ly.com",commits:2}]}}},5241:(n,s,a)=>{a.r(s),a.d(s,{default:()=>o});const e=(0,a(6252).uE)('<p>json ,pickle模块 JSON(JavaScript Object Notation, JS 对象标记) 是一种轻量级的数据交换格式。JSON的数据格式其实就是python里面的字典格式，里面可以包含方括号括起来的数组，也就是python里面的列表。</p><p>在python中，有专门处理json格式的模块—— json 和 picle模块</p><p>Json 模块提供了四个方法： dumps、dump、loads、load</p><p>pickle 模块也提供了四个功能：dumps、dump、loads、load</p><p>一. dumps 和 dump: dumps和dump 序列化方法 dumps只完成了序列化为str， dump必须传文件描述符，将序列化的str保存到文件中</p><p>查看源码： def dumps(obj, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False, **kw): # Serialize <code>obj</code> to a JSON formatted <code>str</code>. # 序列号 “obj” 数据类型 转换为 JSON格式的字符串 def dump(obj, fp, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, cls=None, indent=None, separators=None, default=None, sort_keys=False, **kw): &quot;&quot;&quot;Serialize <code>obj</code> as a JSON formatted stream to <code>fp</code> (a <code>.write()</code>-supporting file-like object). 我理解为两个动作，一个动作是将”obj“转换为JSON格式的字符串，还有一个动作是将字符串写入到文件中，也就是说文件描述符fp是必须要的参数 &quot;&quot;&quot;</p><p>示例代码：</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> json\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment"># dumps可以格式化所有的基本数据类型为字符串</span>\n<span class="token string">&#39;[]&#39;</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment"># 数字</span>\n<span class="token string">&#39;1&#39;</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span>   <span class="token comment"># 字符串</span>\n<span class="token string">&#39;&quot;1&quot;&#39;</span>\n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token builtin">dict</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span><span class="token string">&quot;Tom&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">:</span><span class="token number">23</span><span class="token punctuation">}</span>  \n<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">)</span>     <span class="token comment"># 字典</span>\n<span class="token string">&#39;{&quot;name&quot;: &quot;Tom&quot;, &quot;age&quot;: 23}&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>a = {&quot;name&quot;:&quot;Tom&quot;, &quot;age&quot;:23} with open(&quot;test.json&quot;, &quot;w&quot;, encoding=&#39;utf-8&#39;) as f: # indent 超级好用，格式化保存字典，默认为None，小于0为零个空格 f.write(json.dumps(a, indent=4)) # json.dump(a,f,indent=4) # 和上面的效果一样 保存的文件效果：</p><p>二. loads 和 load</p><p>loads和load 反序列化方法</p><pre><code>   loads 只完成了反序列化，\n   load 只接收文件描述符，完成了读取文件和反序列化\n</code></pre><p>查看源码：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>def loads(s, encoding=None, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n    &quot;&quot;&quot;Deserialize ``s`` (a ``str`` instance containing a JSON document) to a Python object.\n       将包含str类型的JSON文档反序列化为一个python对象&quot;&quot;&quot;\ndef load(fp, cls=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n    &quot;&quot;&quot;Deserialize ``fp`` (a ``.read()``-supporting file-like object containing a JSON document) to a Python object.\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>将一个包含JSON格式数据的可读文件饭序列化为一个python对象&quot;&quot;&quot;</p><p>实例：</p><blockquote><blockquote><blockquote><p>json.loads(&#39;{&quot;name&quot;:&quot;Tom&quot;, &quot;age&quot;:23}&#39;) {&#39;age&#39;: 23, &#39;name&#39;: &#39;Tom&#39;}</p></blockquote></blockquote></blockquote><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>import json\nwith open(&quot;test.json&quot;, &quot;r&quot;, encoding=&#39;utf-8&#39;) as f:\n    aa = json.loads(f.read())\n    f.seek(0)\n    bb = json.load(f)    # 与 json.loads(f.read())\nprint(aa)\nprint(bb)\n\n# 输出：\n{&#39;name&#39;: &#39;Tom&#39;, &#39;age&#39;: 23}\n{&#39;name&#39;: &#39;Tom&#39;, &#39;age&#39;: 23}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>三. json 和 pickle 模块</p><p>json模块和pickle模块都有 dumps、dump、loads、load四种方法，而且用法一样。</p><p>不用的是json模块序列化出来的是通用格式，其它编程语言都认识，就是普通的字符串，</p><p>而picle模块序列化出来的只有python可以认识，其他编程语言不认识的，表现为乱码</p><p>不过picle可以序列化函数，但是其他文件想用该函数，在该文件中需要有该文件的定义（定义和参数必须相同，内容可以不同）</p><p>四. python对象（obj） 与json对象的对应关系</p><p>复制代码 复制代码 +-------------------+---------------+ | Python | JSON | +===================+===============+ | dict | object | +-------------------+---------------+ | list, tuple | array | +-------------------+---------------+ | str | string | +-------------------+---------------+ | int, float | number | +-------------------+---------------+ | True | true | +-------------------+---------------+ | False | false | +-------------------+---------------+ | None | null | +-------------------+---------------+ 复制代码 复制代码</p><p>五. 总结</p><ol><li><p>json序列化方法：</p><pre><code>  dumps：无文件操作            dump：序列化+写入文件\n</code></pre></li><li><p>json反序列化方法：</p><pre><code> loads：无文件操作              load： 读文件+反序列化\n</code></pre></li><li><p>json模块序列化的数据 更通用</p><p>picle模块序列化的数据 仅python可用，但功能强大，可以序列号函数</p></li><li><p>json模块可以序列化和反序列化的 数据类型 见 python对象（obj） 与json对象的对应关系表</p></li><li><p>格式化写入文件利用 indent = 4</p></li></ol>',27),o={render:function(n,s){return e}}}}]);