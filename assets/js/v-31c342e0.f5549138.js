"use strict";(self.webpackChunkistr_wiki_vuepress=self.webpackChunkistr_wiki_vuepress||[]).push([[863],{6672:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-31c342e0",path:"/design-patterns/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F.html",title:"观察者模式（Observer Pattern）",lang:"zh-CN",frontmatter:{title:"观察者模式（Observer Pattern）"},excerpt:"",headers:[{level:3,title:"自我总结",slug:"自我总结",children:[]},{level:3,title:"使用场景",slug:"使用场景",children:[]},{level:3,title:"优缺点",slug:"优缺点",children:[]},{level:3,title:"数据结构",slug:"数据结构",children:[]},{level:3,title:"代码示例",slug:"代码示例",children:[]},{level:3,title:"MediR",slug:"medir",children:[]}],filePathRelative:"design-patterns/观察者模式.md",git:{updatedTime:1618581176e3,contributors:[{name:"刘玉路",email:"lyl07583@ly.com",commits:1}]}}},6511:(n,s,a)=>{a.r(s),a.d(s,{default:()=>p});const e=(0,a(6252).uE)('<h3 id="自我总结" tabindex="-1"><a class="header-anchor" href="#自我总结" aria-hidden="true">#</a> 自我总结</h3><h3 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景" aria-hidden="true">#</a> 使用场景</h3><ul><li>当对一个对象的改变需要同时改变其他对象，而又不知道具体有多少对象需要通知的情况下。</li></ul><h3 id="优缺点" tabindex="-1"><a class="header-anchor" href="#优缺点" aria-hidden="true">#</a> 优缺点</h3><p><strong>优点</strong><strong>缺点</strong></p><ul><li>如果一个被观察者有很多直接和间接的观察者时，将所有的观察者都通知到会花费很多时间。</li><li>如果在被观察者之间有循环依赖的话，被观察者会触发它们之间进行循环调用，导致系统崩溃，在使用观察者模式应特别注意这点。</li></ul><h3 id="数据结构" tabindex="-1"><a class="header-anchor" href="#数据结构" aria-hidden="true">#</a> 数据结构</h3><p>抽象主题角色（Subject）：抽象主题把所有观察者对象的引用保存在一个列表中，并提供增加和删除观察者对象的操作，抽象主题角色又叫做抽象被观察者角色，一般由抽象类或接口实现。 抽象观察者角色（Observer）：为所有具体观察者定义一个接口，在得到主题通知时更新自己，一般由抽象类或接口实现。 具体主题角色（ConcreteSubject）：实现抽象主题接口，具体主题角色又叫做具体被观察者角色。 具体观察者角色（ConcreteObserver）：实现抽象观察者角色所要求的接口，以便使自身状态与主题的状态相协调。</p><h3 id="代码示例" tabindex="-1"><a class="header-anchor" href="#代码示例" aria-hidden="true">#</a> 代码示例</h3><p><strong>场景描述</strong></p><div class="language-csharp ext-cs line-numbers-mode"><pre class="language-csharp"><code><span class="token doc-comment comment">///</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Subscriber</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name<span class="token punctuation">{</span><span class="token keyword">get</span><span class="token punctuation">;</span><span class="token keyword">set</span><span class="token punctuation">;</span><span class="token punctuation">}</span>\n    <span class="token keyword">public</span> <span class="token function">Subscriber</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> name<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        Name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IObserver</span>\n<span class="token punctuation">{</span>\n    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Receive</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Subject</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">// 增加订阅者</span>\n    <span class="token comment">// 移除订阅者</span>\n    <span class="token comment">// 发送通知</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>委托和事件</p><h3 id="medir" tabindex="-1"><a class="header-anchor" href="#medir" aria-hidden="true">#</a> MediR</h3><p>http://www.vnfan.com/robin/d/59f9a505e3c315df.html</p>',14),p={render:function(n,s){return e}}}}]);