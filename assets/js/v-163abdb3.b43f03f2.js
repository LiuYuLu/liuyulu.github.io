"use strict";(self.webpackChunkistr_wiki_vuepress=self.webpackChunkistr_wiki_vuepress||[]).push([[338],{403:(e,i,l)=>{l.r(i),l.d(i,{data:()=>a});const a={key:"v-163abdb3",path:"/design-patterns/%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F.html",title:"外观模式（Facade Pattern）",lang:"zh-CN",frontmatter:{title:"外观模式（Facade Pattern）"},excerpt:"",headers:[{level:3,title:"模式定义",slug:"模式定义",children:[]},{level:3,title:"使用场景",slug:"使用场景",children:[]},{level:3,title:"优缺点",slug:"优缺点",children:[]},{level:3,title:"变化点&稳定块描述",slug:"变化点-稳定块描述",children:[]},{level:3,title:"数据结构",slug:"数据结构",children:[]},{level:3,title:"代码示例",slug:"代码示例",children:[]},{level:3,title:"应用实例",slug:"应用实例",children:[]},{level:3,title:"模式扩展",slug:"模式扩展",children:[]}],filePathRelative:"design-patterns/外观模式.md",git:{updatedTime:1618581176e3,contributors:[{name:"刘玉路",email:"lyl07583@ly.com",commits:1}]}}},1709:(e,i,l)=>{l.r(i),l.d(i,{default:()=>t});const a=(0,l(6252).uE)('<h3 id="模式定义" tabindex="-1"><a class="header-anchor" href="#模式定义" aria-hidden="true">#</a> 模式定义</h3><p>外观（Facade）模式又叫作门面模式，是一种通过为多个复杂的子系统提供一个一致的接口，而使这些子系统更加容易被访问的模式。该模式对外有一个统一接口，外部应用程序不用关心内部子系统的具体细节，这样会大大降低应用程序的复杂度，提高了程序的可维护性。</p><p>在日常编码工作中，我们都在有意无意的大量使用外观模式。只要是高层模块需要调度多个子系统（2个以上的类对象），我们都会自觉地创建一个新的类封装这些子系统，提供精简的接口，让高层模块可以更加容易地间接调用这些子系统的功能。尤其是现阶段各种第三方SDK、开源类库，很大概率都会使用外观模式。</p><h3 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景" aria-hidden="true">#</a> 使用场景</h3><p>通常在以下情况下可以考虑使用外观模式。</p><ol><li>对分层结构系统构建时，使用外观模式定义子系统中每层的入口点可以简化子系统之间的依赖关系。</li><li>当一个复杂系统的子系统很多时，外观模式可以为系统设计一个简单的接口供外界访问。</li><li>当客户端与多个子系统之间存在很大的联系时，引入外观模式可将它们分离，从而提高子系统的独立性和可移植性。</li></ol><h3 id="优缺点" tabindex="-1"><a class="header-anchor" href="#优缺点" aria-hidden="true">#</a> 优缺点</h3><p><strong>优点</strong></p><ol><li>外观（Facade）模式是“迪米特法则”的典型应用</li><li>降低了子系统与客户端之间的耦合度，使得子系统的变化不会影响调用它的客户类。</li><li>对客户屏蔽了子系统组件，减少了客户处理的对象数目，并使得子系统使用起来更加容易。</li><li>降低了大型软件系统中的编译依赖性，简化了系统在不同平台之间的移植过程，因为编译一个子系统不会影响其他的子系统，也不会影响外观对象。 <strong>缺点</strong></li><li>不能很好地限制客户使用子系统类，很容易带来未知风险。</li><li>增加新的子系统可能需要修改外观类或客户端的源代码，违背了“开闭原则”。</li></ol><h3 id="变化点-稳定块描述" tabindex="-1"><a class="header-anchor" href="#变化点-稳定块描述" aria-hidden="true">#</a> 变化点&amp;稳定块描述</h3><p><strong>固定不变的</strong></p><p><strong>变化点</strong></p><h3 id="数据结构" tabindex="-1"><a class="header-anchor" href="#数据结构" aria-hidden="true">#</a> 数据结构</h3><p>外观（Facade）模式的结构比较简单，主要是定义了一个高层接口。它包含了对各个子系统的引用，客户端可以通过它访问各个子系统的功能。现在来分析其基本结构和实现方法。</p><p>包含以下主要角色。</p><ul><li>外观（Facade）角色：为多个子系统对外提供一个共同的接口。</li><li>子系统（Sub System）角色：实现系统的部分功能，客户可以通过外观角色访问它。</li><li>客户（Client）角色：通过一个外观角色访问各个子系统的功能。</li></ul><h3 id="代码示例" tabindex="-1"><a class="header-anchor" href="#代码示例" aria-hidden="true">#</a> 代码示例</h3><h3 id="应用实例" tabindex="-1"><a class="header-anchor" href="#应用实例" aria-hidden="true">#</a> 应用实例</h3><ul><li>service层代码对repository查询的封装操作es</li></ul><h3 id="模式扩展" tabindex="-1"><a class="header-anchor" href="#模式扩展" aria-hidden="true">#</a> 模式扩展</h3><p>在外观模式中，当增加或移除子系统时需要修改外观类，这违背了“开闭原则”。如果引入抽象外观类，则在一定程度上解决了该问题， <img src="https://gitee.com/liuyulu/blog-img/raw/master/202104/jpg/Dm8bkv.jpg" alt="引入抽象外观类的外观模式的结构图"></p><p>参考http://c.biancheng.net/view/1369.html</p>',22),t={render:function(e,i){return a}}}}]);