"use strict";(self.webpackChunkistr_wiki_vuepress=self.webpackChunkistr_wiki_vuepress||[]).push([[906],{9232:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-b976a5fa",path:"/walleci/job.html",title:"Jobs(任务)",lang:"zh-CN",frontmatter:{title:"Jobs(任务)",sidebarDepth:2,sidebar:"auto"},excerpt:"",headers:[{level:2,title:"介绍",slug:"介绍",children:[]},{level:2,title:"完整示例",slug:"完整示例",children:[]},{level:2,title:"配置参数说明",slug:"配置参数说明",children:[{level:3,title:"name(步骤名称)",slug:"name-步骤名称",children:[]},{level:3,title:"stage(步骤归属)",slug:"stage-步骤归属",children:[]},{level:3,title:"image(运行镜像)",slug:"image-运行镜像",children:[]},{level:3,title:"script(执行脚本)",slug:"script-执行脚本",children:[]},{level:3,title:"before_script 和 after_script",slug:"before-script-和-after-script",children:[]},{level:3,title:"only and except",slug:"only-and-except",children:[]},{level:3,title:"variables（Job级）",slug:"variables-job级",children:[]},{level:3,title:"allow_failure(允许错误执行)",slug:"allow-failure-允许错误执行",children:[]},{level:3,title:"when(条件执行)",slug:"when-条件执行",children:[]},{level:3,title:"entrypoint_args",slug:"entrypoint-args",children:[]},{level:3,title:"working_dir",slug:"working-dir",children:[]},{level:3,title:"depends_on",slug:"depends-on",children:[]}]}],filePathRelative:"walleci/job.md",git:{updatedTime:1617093869e3,contributors:[{name:"刘玉路",email:"lyl07583@ly.com",commits:1}]}}},7446:(n,s,a)=>{a.r(s),a.d(s,{default:()=>q});var e=a(6252);const l=(0,e.Wm)("h2",{id:"介绍",tabindex:"-1"},[(0,e.Wm)("a",{class:"header-anchor",href:"#介绍","aria-hidden":"true"},"#"),(0,e.Uk)(" 介绍")],-1),p=(0,e.Wm)("p",null,".walleci.yml中允许配置无限量的jobs。每个jobs必须有一个唯一的名字，job由一列参数来定义jobs的行为。",-1),t=(0,e.Wm)("h2",{id:"完整示例",tabindex:"-1"},[(0,e.Wm)("a",{class:"header-anchor",href:"#完整示例","aria-hidden":"true"},"#"),(0,e.Uk)(" 完整示例")],-1),c=(0,e.Wm)("div",{class:"language-yaml ext-yml line-numbers-mode"},[(0,e.Wm)("pre",{class:"language-yaml"},[(0,e.Wm)("code",null,[(0,e.Wm)("span",{class:"token key atrule"},"jobs"),(0,e.Wm)("span",{class:"token punctuation"},":"),(0,e.Uk)("\n  "),(0,e.Wm)("span",{class:"token punctuation"},"-"),(0,e.Uk)(),(0,e.Wm)("span",{class:"token key atrule"},"name"),(0,e.Wm)("span",{class:"token punctuation"},":"),(0,e.Uk)(" 构建  \n    "),(0,e.Wm)("span",{class:"token key atrule"},"stage"),(0,e.Wm)("span",{class:"token punctuation"},":"),(0,e.Uk)(" test \n    "),(0,e.Wm)("span",{class:"token key atrule"},"image"),(0,e.Wm)("span",{class:"token punctuation"},":"),(0,e.Uk)(" harbor.hxsf.work/walle"),(0,e.Wm)("span",{class:"token punctuation"},"-"),(0,e.Uk)("ci/lighthouse"),(0,e.Wm)("span",{class:"token punctuation"},":"),(0,e.Uk)("latest\n    "),(0,e.Wm)("span",{class:"token key atrule"},"working_dir"),(0,e.Wm)("span",{class:"token punctuation"},":"),(0,e.Uk)(" default\n    "),(0,e.Wm)("span",{class:"token key atrule"},"only"),(0,e.Wm)("span",{class:"token punctuation"},":"),(0,e.Uk)("\n      "),(0,e.Wm)("span",{class:"token punctuation"},"-"),(0,e.Uk)(" master\n    "),(0,e.Wm)("span",{class:"token key atrule"},"except"),(0,e.Wm)("span",{class:"token punctuation"},":"),(0,e.Uk)("\n      "),(0,e.Wm)("span",{class:"token punctuation"},"-"),(0,e.Uk)(" develop\n    "),(0,e.Wm)("span",{class:"token key atrule"},"allow_failure"),(0,e.Wm)("span",{class:"token punctuation"},":"),(0,e.Uk)(),(0,e.Wm)("span",{class:"token boolean important"},"true"),(0,e.Uk)(" \n    "),(0,e.Wm)("span",{class:"token key atrule"},"before_script"),(0,e.Wm)("span",{class:"token punctuation"},":"),(0,e.Uk)(" \n      "),(0,e.Wm)("span",{class:"token punctuation"},"-"),(0,e.Uk)(" rm "),(0,e.Wm)("span",{class:"token punctuation"},"-"),(0,e.Uk)("rf node_modules\n    "),(0,e.Wm)("span",{class:"token key atrule"},"scripts"),(0,e.Wm)("span",{class:"token punctuation"},":"),(0,e.Uk)("\n      "),(0,e.Wm)("span",{class:"token punctuation"},"-"),(0,e.Uk)(" npm install\n    "),(0,e.Wm)("span",{class:"token key atrule"},"after_script"),(0,e.Wm)("span",{class:"token punctuation"},":"),(0,e.Uk)("\n      "),(0,e.Wm)("span",{class:"token punctuation"},"-"),(0,e.Uk)(" ci"),(0,e.Wm)("span",{class:"token punctuation"},"-"),(0,e.Uk)("upload\n")])]),(0,e.Wm)("div",{class:"line-numbers"},[(0,e.Wm)("span",{class:"line-number"},"1"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"2"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"3"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"4"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"5"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"6"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"7"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"8"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"9"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"10"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"11"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"12"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"13"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"14"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"15"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"16"),(0,e.Wm)("br")])],-1),u=(0,e.Wm)("div",{class:"language-yaml ext-yml line-numbers-mode"},[(0,e.Wm)("pre",{class:"language-yaml"},[(0,e.Wm)("code",null,[(0,e.Wm)("span",{class:"token key atrule"},"jobs"),(0,e.Wm)("span",{class:"token punctuation"},":"),(0,e.Uk)("\n  "),(0,e.Wm)("span",{class:"token punctuation"},"-"),(0,e.Uk)(),(0,e.Wm)("span",{class:"token key atrule"},"name"),(0,e.Wm)("span",{class:"token punctuation"},":"),(0,e.Uk)(" 构建  "),(0,e.Wm)("span",{class:"token comment"},"# job任务的名称"),(0,e.Uk)("\n    "),(0,e.Wm)("span",{class:"token key atrule"},"stage"),(0,e.Wm)("span",{class:"token punctuation"},":"),(0,e.Uk)(" test "),(0,e.Wm)("span",{class:"token comment"},"# 归属的执行步骤"),(0,e.Uk)("\n    "),(0,e.Wm)("span",{class:"token key atrule"},"image"),(0,e.Wm)("span",{class:"token punctuation"},":"),(0,e.Uk)(" harbor.hxsf.work/walle"),(0,e.Wm)("span",{class:"token punctuation"},"-"),(0,e.Uk)("ci/lighthouse"),(0,e.Wm)("span",{class:"token punctuation"},":"),(0,e.Uk)("latest\n    "),(0,e.Wm)("span",{class:"token key atrule"},"working_dir"),(0,e.Wm)("span",{class:"token punctuation"},":"),(0,e.Uk)(" default\n    "),(0,e.Wm)("span",{class:"token key atrule"},"only"),(0,e.Wm)("span",{class:"token punctuation"},":"),(0,e.Uk)("\n      "),(0,e.Wm)("span",{class:"token punctuation"},"-"),(0,e.Uk)(" master\n    "),(0,e.Wm)("span",{class:"token key atrule"},"except"),(0,e.Wm)("span",{class:"token punctuation"},":"),(0,e.Uk)("\n      "),(0,e.Wm)("span",{class:"token punctuation"},"-"),(0,e.Uk)(" develop\n    "),(0,e.Wm)("span",{class:"token key atrule"},"allow_failure"),(0,e.Wm)("span",{class:"token punctuation"},":"),(0,e.Uk)(),(0,e.Wm)("span",{class:"token boolean important"},"true"),(0,e.Uk)(),(0,e.Wm)("span",{class:"token comment"},"# job失败是否执行余下的job"),(0,e.Uk)("\n    "),(0,e.Wm)("span",{class:"token key atrule"},"before_script"),(0,e.Wm)("span",{class:"token punctuation"},":"),(0,e.Uk)(),(0,e.Wm)("span",{class:"token comment"},"# job运行前，执行的shell脚本，一般会做环境配置"),(0,e.Uk)("\n      "),(0,e.Wm)("span",{class:"token punctuation"},"-"),(0,e.Uk)(" rm "),(0,e.Wm)("span",{class:"token punctuation"},"-"),(0,e.Uk)("rf node_modules\n    "),(0,e.Wm)("span",{class:"token key atrule"},"scripts"),(0,e.Wm)("span",{class:"token punctuation"},":"),(0,e.Uk)("\n      "),(0,e.Wm)("span",{class:"token punctuation"},"-"),(0,e.Uk)(" npm install\n    "),(0,e.Wm)("span",{class:"token key atrule"},"after_script"),(0,e.Wm)("span",{class:"token punctuation"},":"),(0,e.Uk)("\n      "),(0,e.Wm)("span",{class:"token punctuation"},"-"),(0,e.Uk)(" ci"),(0,e.Wm)("span",{class:"token punctuation"},"-"),(0,e.Uk)("upload\n")])]),(0,e.Wm)("div",{class:"line-numbers"},[(0,e.Wm)("span",{class:"line-number"},"1"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"2"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"3"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"4"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"5"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"6"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"7"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"8"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"9"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"10"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"11"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"12"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"13"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"14"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"15"),(0,e.Wm)("br"),(0,e.Wm)("span",{class:"line-number"},"16"),(0,e.Wm)("br")])],-1),o=(0,e.Wm)("h2",{id:"配置参数说明",tabindex:"-1"},[(0,e.Wm)("a",{class:"header-anchor",href:"#配置参数说明","aria-hidden":"true"},"#"),(0,e.Uk)(" 配置参数说明")],-1),r=(0,e.Wm)("thead",null,[(0,e.Wm)("tr",null,[(0,e.Wm)("th",null,"Keyword"),(0,e.Wm)("th",null,"Required"),(0,e.Wm)("th",null,"Description")])],-1),i=(0,e.Uk)("name"),m=(0,e.Wm)("td",null,"必须",-1),b=(0,e.Wm)("td",null,"给job命名",-1),k=(0,e.Wm)("tr",null,[(0,e.Wm)("td",null,"image"),(0,e.Wm)("td",null,"非必须"),(0,e.Wm)("td",null,"所使用的docker镜像，查阅使用docker镜像")],-1),d=(0,e.Wm)("tr",null,[(0,e.Wm)("td",null,"script"),(0,e.Wm)("td",null,"必须"),(0,e.Wm)("td",null,"Runner执行的命令或脚本")],-1),W=(0,e.Wm)("tr",null,[(0,e.Wm)("td",null,"stage"),(0,e.Wm)("td",null,"非必须"),(0,e.Wm)("td",null,"定义job stage（默认：test）")],-1),y=(0,e.Wm)("tr",null,[(0,e.Wm)("td",null,"variables"),(0,e.Wm)("td",null,"非必须"),(0,e.Wm)("td",null,"定义job级别的变量")],-1),h=(0,e.Wm)("tr",null,[(0,e.Wm)("td",null,"only"),(0,e.Wm)("td",null,"非必须"),(0,e.Wm)("td",null,"定义一列git分支，并为其创建job")],-1),g=(0,e.Wm)("tr",null,[(0,e.Wm)("td",null,"except"),(0,e.Wm)("td",null,"非必须"),(0,e.Wm)("td",null,"定义一列git分支，不创建job")],-1),v=(0,e.Wm)("tr",null,[(0,e.Wm)("td",null,"allow_failure"),(0,e.Wm)("td",null,"非必须"),(0,e.Wm)("td",null,"允许job失败。失败的job不影响commit状态")],-1),f=(0,e.Wm)("tr",null,[(0,e.Wm)("td",null,"when"),(0,e.Wm)("td",null,"非必须"),(0,e.Wm)("td",null,"定义何时开始job。可以是on_success，on_failure，always或者manual")],-1),j=(0,e.Wm)("tr",null,[(0,e.Wm)("td",null,"cache（待实现）"),(0,e.Wm)("td",null,"非必须"),(0,e.Wm)("td",null,"定义应在后续运行之间缓存的文件列表")],-1),_=(0,e.Wm)("tr",null,[(0,e.Wm)("td",null,"before_script"),(0,e.Wm)("td",null,"非必须"),(0,e.Wm)("td",null,"重写一组在作业前执行的命令")],-1),w=(0,e.Wm)("tr",null,[(0,e.Wm)("td",null,"after_script"),(0,e.Wm)("td",null,"非必须"),(0,e.Wm)("td",null,"重写一组在作业后执行的命令")],-1),x=(0,e.Wm)("tr",null,[(0,e.Wm)("td",null,"entrypoint_args"),(0,e.Wm)("td",null,"非必须"),(0,e.Wm)("td",null,[(0,e.Uk)("类似 "),(0,e.Wm)("code",null,"docker run [OPTIONS] IMAGE [COMMAND] [ARGS...]")])],-1),U=(0,e.Wm)("tr",null,[(0,e.Wm)("td",null,"working_dir"),(0,e.Wm)("td",null,"非必须"),(0,e.Wm)("td",null,"运行镜像时指定的工作目录")],-1),A=(0,e.Wm)("tr",null,[(0,e.Wm)("td",null,"depends_on"),(0,e.Wm)("td",null,"非必须"),(0,e.Wm)("td",null,"指定job执行时依赖的额外job名称")],-1),C=(0,e.uE)('<h3 id="name-步骤名称" tabindex="-1"><a class="header-anchor" href="#name-步骤名称" aria-hidden="true">#</a> name(步骤名称)</h3><p>给运行的job定义一个名称。</p><h3 id="stage-步骤归属" tabindex="-1"><a class="header-anchor" href="#stage-步骤归属" aria-hidden="true">#</a> stage(步骤归属)</h3><p>stage允许一组jobs进入不同的stages。jobs在相同的stage时会parallel同时进行。查阅stages更多的用法请查看stages。</p><h3 id="image-运行镜像" tabindex="-1"><a class="header-anchor" href="#image-运行镜像" aria-hidden="true">#</a> image(运行镜像)</h3><p>每个job运行在不同的容器中，image定义了使用的容器类别。 优先级：image(job) &gt; image(pipeline)</p><div class="custom-container danger"><p class="custom-container-title">警告</p><p>如此项在pipeline和job中都没有定义，则job会跳过步骤。</p></div><h3 id="script-执行脚本" tabindex="-1"><a class="header-anchor" href="#script-执行脚本" aria-hidden="true">#</a> script(执行脚本)</h3><p>script是Runner执行的shell脚本。该参数可以用数组包含多个命令：</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">job</span><span class="token punctuation">:</span>\n  <span class="token key atrule">script</span><span class="token punctuation">:</span>\n    <span class="token punctuation">-</span> uname <span class="token punctuation">-</span>a\n    <span class="token punctuation">-</span> bundle exec rspec\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">当脚本执行错误时：</p><p>有时候，script命令需要被单引号或者是双引号包裹起来。举个例子，当命令中包含冒号(:)时，script需要被包在双引号中，这样YAML解析器才可以正确解析为一个字符串而不是一个键值对(key:value)。使用这些特殊字符的时候一定要注意：:,{,},[,],,,&amp;,*,#,?,|,-,&lt;,&gt;,=,!。</p></div><h3 id="before-script-和-after-script" tabindex="-1"><a class="header-anchor" href="#before-script-和-after-script" aria-hidden="true">#</a> before_script 和 after_script</h3><p>它可能会覆盖全局定义的before_script和after_script：</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">before_script</span><span class="token punctuation">:</span>\n<span class="token punctuation">-</span> global before script\n\n<span class="token key atrule">job</span><span class="token punctuation">:</span>\n  <span class="token key atrule">before_script</span><span class="token punctuation">:</span>\n    <span class="token punctuation">-</span> execute this instead of global before script\n  <span class="token key atrule">script</span><span class="token punctuation">:</span>\n    <span class="token punctuation">-</span> my command\n  <span class="token key atrule">after_script</span><span class="token punctuation">:</span>\n    <span class="token punctuation">-</span> execute this after my script\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="only-and-except" tabindex="-1"><a class="header-anchor" href="#only-and-except" aria-hidden="true">#</a> only and except</h3><p>only和except是两个参数用分支策略来限制jobs构建：</p><ul><li>only定义哪些分支和标签的git项目将会被job执行。</li><li>except定义哪些分支和标签的git项目将不会被job执行。</li></ul><p>下面是refs策略的使用规则：</p><ul><li>only和except可同时使用。如果only和except在一个job配置中同时存在，则以only为准，跳过except(从下面示例中得出)。</li><li>only和except可以使用正则表达式。</li></ul><p>在下面这个例子中，job将只会运行以issue-开始的refs(分支)，然而except中设置将被跳过。</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">job</span><span class="token punctuation">:</span>\n  <span class="token comment"># use regexp</span>\n  <span class="token key atrule">only</span><span class="token punctuation">:</span>\n    <span class="token punctuation">-</span> /^issue<span class="token punctuation">-</span>.<span class="token important">*$/</span>\n  <span class="token comment"># use special keyword</span>\n  <span class="token key atrule">except</span><span class="token punctuation">:</span>\n    <span class="token punctuation">-</span> branches\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>在下面这个例子中，job将只会执行有tags的git仓库变动。</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">job</span><span class="token punctuation">:</span>\n  <span class="token comment"># use special keywords</span>\n  <span class="token key atrule">only</span><span class="token punctuation">:</span>\n    <span class="token punctuation">-</span> tags\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="variables-job级" tabindex="-1"><a class="header-anchor" href="#variables-job级" aria-hidden="true">#</a> variables（Job级）</h3><p>在job中是可以使用关键字variables来定义job变量。它的运行原理跟pipeline级别定义是一样的，但是它允许设置特殊的job变量。</p><p>当设置了job级别的关键字variables，它会覆盖全局YAML和预定义中的job变量。想要关闭全局变量可以在job中设置一个空数组：</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">job_name</span><span class="token punctuation">:</span>\n  <span class="token key atrule">variables</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Job变量的优先级关系可查看pipeline的variables文档说明。</p><h3 id="allow-failure-允许错误执行" tabindex="-1"><a class="header-anchor" href="#allow-failure-允许错误执行" aria-hidden="true">#</a> allow_failure(允许错误执行)</h3><p>allow_failure可以用于当你想设置一个job失败的之后并不影响后续的CI组件的时候。失败的jobs不会影响到commit状态。</p><p>当开启了允许job失败，所有的intents和purposes里的pipeline都是成功/绿色，但是也会有一个&quot;CI build passed with warnings&quot;信息显示在merge request或commit或job page。这被允许失败的作业使用，但是如果失败表示其他地方应采取其他（手动）步骤。</p><p>下面的这个例子中，job1和job2将会并列进行，如果job1失败了，它也不会影响进行中的下一个stage，因为这里有设置了allow_failure: true。</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">job1</span><span class="token punctuation">:</span>\n  <span class="token key atrule">stage</span><span class="token punctuation">:</span> test\n  <span class="token key atrule">script</span><span class="token punctuation">:</span>\n  <span class="token punctuation">-</span> execute_script_that_will_fail <span class="token comment"># 执行失败的脚本</span>\n  <span class="token key atrule">allow_failure</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>\n\n<span class="token key atrule">job2</span><span class="token punctuation">:</span>\n  <span class="token key atrule">stage</span><span class="token punctuation">:</span> test\n  <span class="token key atrule">script</span><span class="token punctuation">:</span>\n  <span class="token punctuation">-</span> execute_script_that_will_succeed <span class="token comment"># 执行成功的脚本</span>\n\n<span class="token key atrule">job3</span><span class="token punctuation">:</span>\n  <span class="token key atrule">stage</span><span class="token punctuation">:</span> deploy\n  <span class="token key atrule">script</span><span class="token punctuation">:</span>\n  <span class="token punctuation">-</span> deploy_to_staging\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="when-条件执行" tabindex="-1"><a class="header-anchor" href="#when-条件执行" aria-hidden="true">#</a> when(条件执行)</h3><p>在执行stage中的job时，会判断上一个stage的状态是否能满足执行要求。</p><p>when可以设置以下值：</p><ul><li><code>on_success</code> - 只有前面stages的所有工作成功时才执行。 <strong>默认值</strong>。</li><li><code>on_failure</code> - 当前面stages中任意一个jobs失败后执行。</li><li><code>always</code> - 无论前面stages中jobs状态如何都执行。</li><li><code>manual</code> - 手动执行(暂未开放)。</li></ul><div class="custom-container tip"><p class="custom-container-title">举个例子：</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">stages</span><span class="token punctuation">:</span>\n<span class="token punctuation">-</span> build\n<span class="token punctuation">-</span> cleanup_build\n<span class="token punctuation">-</span> test\n<span class="token punctuation">-</span> deploy\n<span class="token punctuation">-</span> cleanup\n\n<span class="token key atrule">build_job</span><span class="token punctuation">:</span>\n  <span class="token key atrule">stage</span><span class="token punctuation">:</span> build\n  <span class="token key atrule">script</span><span class="token punctuation">:</span>\n  <span class="token punctuation">-</span> make build\n\n<span class="token key atrule">cleanup_build_job</span><span class="token punctuation">:</span>\n  <span class="token key atrule">stage</span><span class="token punctuation">:</span> cleanup_build\n  <span class="token key atrule">script</span><span class="token punctuation">:</span>\n  <span class="token punctuation">-</span> cleanup build when failed\n  <span class="token key atrule">when</span><span class="token punctuation">:</span> on_failure\n\n<span class="token key atrule">test_job</span><span class="token punctuation">:</span>\n  <span class="token key atrule">stage</span><span class="token punctuation">:</span> test\n  <span class="token key atrule">script</span><span class="token punctuation">:</span>\n  <span class="token punctuation">-</span> make test\n\n<span class="token key atrule">deploy_job</span><span class="token punctuation">:</span>\n  <span class="token key atrule">stage</span><span class="token punctuation">:</span> deploy\n  <span class="token key atrule">script</span><span class="token punctuation">:</span>\n  <span class="token punctuation">-</span> make deploy\n  <span class="token key atrule">when</span><span class="token punctuation">:</span> manual\n\n<span class="token key atrule">cleanup_job</span><span class="token punctuation">:</span>\n  <span class="token key atrule">stage</span><span class="token punctuation">:</span> cleanup\n  <span class="token key atrule">script</span><span class="token punctuation">:</span>\n  <span class="token punctuation">-</span> cleanup after jobs\n  <span class="token key atrule">when</span><span class="token punctuation">:</span> always\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><p>脚本说明：</p><ul><li>只有当build_job失败的时候才会执行`cleanup_build_job 。</li><li>不管前一个job执行失败还是成功都会执行`cleanup_job 。</li><li>可以执行从瓦力CI界面中手动执行deploy_jobs。</li></ul></div><h3 id="entrypoint-args" tabindex="-1"><a class="header-anchor" href="#entrypoint-args" aria-hidden="true">#</a> entrypoint_args</h3><p>使用该参数可以覆盖镜像中的entrypoint配置。<strong>注意此项配置高于script，配置后将不再执行script内容。</strong></p><h3 id="working-dir" tabindex="-1"><a class="header-anchor" href="#working-dir" aria-hidden="true">#</a> working_dir</h3><p>运行镜像时指定的工作目录，不填写默认是/walleci/code ，此项填写default，则不指定工作目录，</p><p>如果使用entrypoint_args，注意需要处理该项数据。</p><h3 id="depends-on" tabindex="-1"><a class="header-anchor" href="#depends-on" aria-hidden="true">#</a> depends_on</h3><p>指定job执行时依赖的额外job名称，主要用于配置job运行时依赖基础环境。</p><div class="custom-container danger"><p class="custom-container-title">警告</p><p>被依赖的job需要优先于当前job执行 当前job执行时，被依赖的job必须时运行状态，如果没有状态要求，可以用stage实现顺序执行</p></div><p>使用示例</p><div class="language-yaml ext-yml line-numbers-mode"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token number">1</span>\n\n<span class="token key atrule">stages</span><span class="token punctuation">:</span>\n  <span class="token punctuation">-</span> build\n  <span class="token punctuation">-</span> test\n  <span class="token punctuation">-</span> deploy\n\n<span class="token key atrule">jobs</span><span class="token punctuation">:</span>\n  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Mysql服务\n    <span class="token key atrule">stage</span><span class="token punctuation">:</span> build\n    <span class="token key atrule">image</span><span class="token punctuation">:</span> harbor.hxsf.work/walle<span class="token punctuation">-</span>ci/mysql<span class="token punctuation">:</span>1.0.0\n  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> Redis服务\n    <span class="token key atrule">stage</span><span class="token punctuation">:</span> build\n    <span class="token key atrule">image</span><span class="token punctuation">:</span> harbor.hxsf.work/walle<span class="token punctuation">-</span>ci/redis<span class="token punctuation">:</span>1.0.0\n  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> build\n    <span class="token key atrule">stage</span><span class="token punctuation">:</span> build\n    <span class="token key atrule">image</span><span class="token punctuation">:</span> harbor.hxsf.work/walle<span class="token punctuation">-</span>ci/maven<span class="token punctuation">:</span><span class="token number">1.8</span>\n    <span class="token key atrule">scripts</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> mvn <span class="token punctuation">-</span>v\n    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> Mysql服务\n      <span class="token punctuation">-</span> Redis服务\n\n  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> mongo依赖\n    <span class="token key atrule">stage</span><span class="token punctuation">:</span> test\n    <span class="token key atrule">image</span><span class="token punctuation">:</span> harbor.hxsf.work/walle<span class="token punctuation">-</span>ci/mongo<span class="token punctuation">:</span>1.0.0\n  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> test\n    <span class="token key atrule">stage</span><span class="token punctuation">:</span> test\n    <span class="token key atrule">image</span><span class="token punctuation">:</span> harbor.hxsf.work/walle<span class="token punctuation">-</span>ci/maven<span class="token punctuation">:</span><span class="token number">1.8</span>\n    <span class="token key atrule">scripts</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> mvn <span class="token punctuation">-</span>v\n    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> Mysql服务\n      <span class="token punctuation">-</span> mongo依赖\n\n  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> deploy发布\n    <span class="token key atrule">stage</span><span class="token punctuation">:</span> deploy\n    <span class="token key atrule">image</span><span class="token punctuation">:</span> harbor.hxsf.work/walle<span class="token punctuation">-</span>ci/deploy<span class="token punctuation">:</span>1.0.0\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div>',48),q={render:function(n,s){const a=(0,e.up)("CodeGroupItem"),q=(0,e.up)("CodeGroup"),M=(0,e.up)("RouterLink");return(0,e.wg)(),(0,e.j4)(e.HY,null,[l,p,t,(0,e.Wm)(q,null,{default:(0,e.w5)((()=>[(0,e.Wm)(a,{title:"基础示例",active:""},{default:(0,e.w5)((()=>[c])),_:1}),(0,e.Wm)(a,{title:"完整示例"},{default:(0,e.w5)((()=>[u])),_:1})])),_:1}),o,(0,e.Wm)("table",null,[r,(0,e.Wm)("tbody",null,[(0,e.Wm)("tr",null,[(0,e.Wm)("td",null,[(0,e.Wm)(M,{to:"/walleci/job.html#name-%E6%AD%A5%E9%AA%A4%E5%90%8D%E7%A7%B0"},{default:(0,e.w5)((()=>[i])),_:1})]),m,b]),k,d,W,y,h,g,v,f,j,_,w,x,U,A])]),C],64)}}}}]);